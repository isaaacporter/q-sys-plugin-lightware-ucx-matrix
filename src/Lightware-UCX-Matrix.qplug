PluginInfo = {
    Name = "Lightware~UCX Matrix (1.0.0.0)", -- The tilde here indicates folder structure in the Shematic Elements pane
    Version = "1.0.0.1",
    Id = "qsys.lightware.ucx.1.0.0.0", -- show this is just a unique id. Show some commented out 'fun' unique ids
    Description = "Control for Lightware UCX range of Video Matrices",
    ShowDebug = false,
    Author = "Isaac Porter"
}


-- Once you've drawn your plugin in Designer, you can determine what colors you use a lot. Save yourself some time by putting them in a table, and then simply calling them later.
local Colors = {
    lightware_red = {157, 11, 14},
    lightware_black = {28, 40, 52},
    White = {255, 255, 255},
    Black = {0, 0, 0},
    Red = {255, 0, 0},
    Green = {0, 255, 0}
}

function GetColor(props)
    return Colors.lightware_red
end

input_count = 8
output_count = 8
connMethod = "LW3"
-- We can let users determine some of the plugin properties by exposing them here
-- While this function can be very useful, it is completely optional and not always needed.
-- If no Properties are set here, only the position and fill properties of your plugin will show in the Properties pane
function GetProperties()
    props = {
        {
            Name = "IP Address",
            Type = "string",
            Value = "127.0.0.1"
        },
        {
            Name = "Model",
            Type = "enum",
            Choices = {"UCX-2x1", "UCX-4x2"},
            Value = "UCX-4x2"
        }
        --[[ -- for future use
            {
            Name = "Independent Audio",
            Type = "boolean",
            Value = false
        },]]
    }
    return props
end

-- The below function is optional (like GetProperties() is), but it can allow further customization of what users can and can't do with your plugin.
-- In this example, when Model 1 is selected in the properties pane, the ability to modify some of the properties will be hidden, only allowing customization with Model 2
-- Another application of this is if you have different input/output types for different models, and want those properties to be dynamic in the Properties pane
function RectifyProperties(props)
    return props
end

-- The below function is where you will populate the controls for your plugin.
-- If you've written some of the Runtime code already, simply use the control names you populated in Text Controller/Control Script, and use their Properties to inform the values here
-- ControlType can be Button, Knob, Indicator or Text
-- ButtonType ( ControlType == Button ) can be Momentary, Toggle or Trigger
-- IndicatorType ( ControlType == Indicator ) can be Led, Meter, Text or Status
-- ControlUnit ( ControlType == Knob ) can be Hz, Float, Integer, Pan, Percent, Position or Seconds
function GetControls(props)
    ctls = {
        -- System Pins
        {
            Name = "online",
            ControlType = "Indicator",
            IndicatorType = "Led",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "ip_address",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Both",
            Count = 1,
            UserPin = true
        },
        {
            Name = "model",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "serial_number",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "firmware_version",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "input_signal",
            ControlType = "Indicator",
            IndicatorType = "Led",
            PinStyle = "Output",
            Count = input_count,
            UserPin = true
        }
    }
    for i = 1, output_count do
        table.insert(
            ctls,
            {
                Name = "output_" .. i,
                ControlType = "Text",
                PinStyle = "Both",
                UserPin = true
            }
        )
        table.insert(
            ctls,
            {
                Name = "video_mute_" .. i,
                ControlType = "Button",
                ButtonType = "Toggle",
                PinStyle = "Both",
                UserPin = true
            }
        )
        for s = 1, input_count do
            table.insert(
                ctls,
                {
                    Name = "input_" .. s .. "-output_" .. i,
                    ControlType = "Button",
                    ButtonType = "Toggle",
                    PinStyle = "Both",
                    UserPin = true
                }
            )
        end
    end
    return ctls
end

-- Variable holding Page Names for ease
local pagenames = {"Display"}

-- This function allows you to populate pages in your plugin.
function GetPages(props)
    pages = {}
    table.insert(pages, {name = pagenames[1]})
    return pages
end

-- This function allows you to layout pages in your plugin.
function GetControlLayout(props)
    local layout = {}

    input_count, output_count = string.match(props["Model"].Value, "UCX-(%d+)x(%d+)") -- not sure why this doesn't work

    if props["Model"].Value == "UCX-2x1" then
        input_count, output_count = 2, 1
    elseif props["Model"].Value == "UCX-4x2" then
        input_count, output_count = 4, 2
    else
        input_count, output_count = 4, 2 -- default
    end

    local title_size = {224, 32}
    local btn_size = {32, 24}
    local status_groupbox_size = {title_size[1], 6 * btn_size[2]}
    local matrix_groupbox_position = {0, title_size[2] + status_groupbox_size[2] + (0.5 * btn_size[2])}
    local matrix_groupbox_size = {
        72 + (output_count * btn_size[1]),
        16 + (3 * btn_size[2]) + (input_count * btn_size[2])
    }

    graphics = {
        {
            Type = "Header",
            Text = "Lightware Matrix",
            HTextAlign = "Center",
            Color = Colors.lightware_red,
            FontSize = 16,
            Position = {0, 0},
            Size = title_size
        },
        {
            Type = "GroupBox",
            Text = "Status",
            HTextAlign = "Left",
            Fill = Colors.lightware_black,
            CornerRadius = 8,
            StrokeColor = Colors.lightware_red,
            Color = Colors.lightware_red,
            StrokeWidth = 1,
            Position = {0, title_size[2]},
            Size = status_groupbox_size
        },
        {
            Type = "Text",
            Text = "Online:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.White,
            Position = {0, title_size[2] + (0.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
        {
            Type = "Text",
            Text = "IP Address:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.White,
            Position = {0, title_size[2] + (1.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
        {
            Type = "Text",
            Text = "Model:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.White,
            Position = {0, title_size[2] + (2.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
        {
            Type = "Text",
            Text = "Serial Number:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.White,
            Position = {0, title_size[2] + (3.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
        {
            Type = "Text",
            Text = "Firmware:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.White,
            Position = {0, title_size[2] + (4.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
        {
            Type = "GroupBox",
            Text = "Matrix",
            HTextAlign = "Left",
            Fill = Colors.lightware_black,
            CornerRadius = 8,
            StrokeColor = Colors.lightware_red,
            Color = Colors.lightware_red,
            StrokeWidth = 1,
            Position = matrix_groupbox_position,
            Size = matrix_groupbox_size
        },
        {
            Type = "Text",
            Text = "Signal",
            FontSize = 10,
            Color = Colors.White,
            Position = {matrix_groupbox_position[1], (matrix_groupbox_position[2] + (2.5 * btn_size[2]))},
            Size = btn_size
        }
    }
    for i = 1, input_count do
        table.insert(
            graphics,
            {
                Type = "Text",
                Text = "In" .. i,
                Color = Colors.White,
                Position = {
                    (matrix_groupbox_position[1] + btn_size[1]),
                    (matrix_groupbox_position[2] + (2.5 * btn_size[2])) + (i * btn_size[2])
                },
                Size = btn_size
            }
        )
    end
    for i = 1, output_count do
        table.insert(
            graphics,
            {
                Type = "Text",
                Text = "Out\r" .. i,
                Color = Colors.White,
                Position = {btn_size[1] + (i * btn_size[1]), (matrix_groupbox_position[2] + (1.5 * btn_size[2]))},
                Size = btn_size
            }
        )
    end
    -- System
    layout["online"] = {
        PrettyName = "System~Online",
        Style = "Indicator",
        Color = {0, 255, 0},
        Position = {3 * btn_size[1], title_size[2] + (0.5 * btn_size[2])},
        Size = {btn_size[2], btn_size[2]}
    }
    layout["ip_address"] = {
        PrettyName = "System~IP Address",
        Style = "TextBox",
        Position = {3 * btn_size[1], title_size[2] + (1.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["model"] = {
        PrettyName = "System~Model Name",
        Style = "Text",
        Position = {3 * btn_size[1], title_size[2] + (2.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["serial_number"] = {
        PrettyName = "System~Part Number",
        Style = "Text",
        Position = {3 * btn_size[1], title_size[2] + (3.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["firmware_version"] = {
        PrettyName = "System~Firmware Version",
        Style = "Text",
        Position = {3 * btn_size[1], title_size[2] + (4.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
    }
    for i = 1, output_count do -- For each output
        layout["output_" .. i] = {
            PrettyName = "Output " .. i .. "~Select",
            Style = "Indicator",
            Color = {255, 255, 255},
            Position = {btn_size[1] + (i * btn_size[1]), matrix_groupbox_position[2] + (2.5 * btn_size[2])},
            Size = btn_size
        }
        layout["video_mute_" .. i] = {
            PrettyName = "Video Mute~Video Mute " .. i,
            Style = "Button",
            Legend = "Mute",
            Color = {255, 0, 0},
            Position = {btn_size[1] + (i * btn_size[1]), matrix_groupbox_position[2] + (0.5 * btn_size[2])},
            Size = btn_size
        }
        for s = 1, input_count do -- For each input
            layout["input_" .. s .. "-output_" .. i] = {
                PrettyName = "Output " .. i .. "~In" .. s .. " -> Out" .. i,
                Style = "Button",
                Legend = tostring(s),
                Position = {
                    btn_size[1] + (i * btn_size[1]),
                    matrix_groupbox_position[2] + (2.5 * btn_size[2] + (s * btn_size[2]))
                },
                Size = btn_size
            }
        end
    end
    for i = 1, input_count do
        layout["input_signal " .. i] = {
            PrettyName = string.format("Signal Presence~Source %02i", i),
            Style = "Indicator",
            Color = {0, 255, 0},
            Position = {
                (matrix_groupbox_position[1] + (btn_size[1] - btn_size[2]) / 2),
                matrix_groupbox_position[2] + ((i + 2.5) * btn_size[2])
            },
            Size = {btn_size[2], btn_size[2]}
        }
    end
    return layout, graphics
end

if Controls then
    -- Local Structure for holding State
    LW3 = {
        Host = "",
        Port = 6107,
        Rx = ""
    }

    -- Build a Client
    conn = TcpSocket.New()
    conn.ReadTimeout = 0
    conn.WriteTimeout = 0
    conn.ReconnectTimeout = 5

    -- Create and setup the Communications Timeout
    timerComms = Timer.New()
    timerComms.EventHandler = function(timer)
        timer:Stop()
        Controls.online.Boolean = false
        print("Connection Timed Out")
        conn:Disconnect()
        fnConnect()
    end

    -- Create and setup Polling
    timerPoll = Timer.New()

    timerPoll.EventHandler = function(timer)
        fnPoll()
    end

    function fnInitPoll()
        timerPoll:Stop()
        timerPoll:Start(20)
    end

    function fnPoll()
        -- No need for Polling - tested device returns UpTime each second
        --fnSend("GET", "/.*")
    end

    -- Data Sending Helper Function
    function fnSend(cmd, arg)
        -- Build Packet
        local toSend = cmd .. " " .. arg
        -- Send to device
        print("-->LW::" ..toSend)
        conn:Write(toSend .. "\x0D\x0A")
        -- Reset Polling
        fnInitPoll()
    end

    function matrix_feedback(inp, outp)
        Controls["output_" .. outp].String = inp
        for i = 1, input_count do
            Controls["input_" .. i .. "-output_" .. outp].Boolean = i == tonumber(inp)
        end
    end

    function tie_command(inp, outp)
        fnSend("CALL", string.format("/V1/MEDIA/VIDEO/XP:switch(I%1i:O%1i)", inp, outp))
    end

    -- Setup Utility Callbacks as required
    conn.Connected = function(conn)
        print("Plugin is connected")

        -- Get Meta Data
        fnSend("GETALL", "/")

        -- Get and Subscribe to System State Data
        fnSend("GET", "/V1/MANAGEMENT/DATETIME")
        fnSend("OPEN", "/V1/MANAGEMENT/DATETIME")

        -- Get and Subscribe to Video Routing Data
        fnSend("OPEN", "/V1/MEDIA/VIDEO/XP/*")
        for i = 1, output_count do
            fnSend("GETALL", string.format("/V1/MEDIA/VIDEO/XP/O%i", i))
        end
        for i = 1, input_count do
            fnSend("GETALL", string.format("/V1/MEDIA/VIDEO/XP/I%i", i))
        end
    end
    conn.Closed = function(conn)
        print("Plugin was closed by the remote end")
    end
    conn.Error = function(conn, err)
        print("Plugin had an error:" .. err)
    end

    -- Helper Function - Open TCP Connection
    function fnConnect()
        print("Plugin Connecting")
        -- Open Connection
        if connMethod == "TCP" then 
            conn:Connect(LW3.Host, LW3.Port)
        elseif connMethod == "WS" then 
            conn:Connect("ws", LW3.Host, "/lw3", 80)
        elseif connMethod == "WSS" then 
            conn:Connect("wss", LW3.Host, "/lw3", 443)
        end
        -- Set IP address value
        if Controls.ip_address then
            Controls.ip_address.String = LW3.Host .. ":" .. LW3.Port
        end
    end

    local function split(str, delim)
        local result = {}
        for part in str:gmatch("[^" .. delim .. "]+") do
            result[#result + 1] = part
        end
        return result
    end

    -- Setup Data Callbacks as required
    conn.Data = function(conn)
        -- Read out lines from the buffer
        line = conn:ReadLine(TcpSocket.EOL.Any)
        while (line ~= nil) do
            --print(line)
            -- Remove the header
            x = line:find(" ")
            if x ~= nil then
                line = line:sub(x + 1)
            end
            -- Get Path if "." is present
            x = line:find("%.")
            y = line:find("%=")
            if x ~= nil and y ~= nil then
                path = line:sub(1, x - 1)
                func = line:sub(x + 1, y - 1)
                val = line:sub(y + 1)
                -- Select Command Path
                if path == "/" then -- Root
                    -- System Status
                    -- Part Number
                    if func == "PartNumber" then
                    --Controls.PartNumber.String = val
                    end
                    -- Serial Number
                    if func == "SerialNumber" then
                        Controls.serial_number.String = val
                    end
                    -- Product Name
                    if func == "ProductName" then
                        Controls.model.String = val
                    end
                    -- Firmware
                    if func == "PackageVersion" then
                        Controls.firmware_version.String = val
                    end
                elseif path == "/V1/MANAGEMENT/DATETIME" then -- Management Status
                    -- Uptime
                    if func == "Uptime" then
                        --Controls.UpTime.Value = val
                        -- Stop and restart Comms timer
                        timerComms:Stop()
                        if Controls.online then -- Check for when developing in a Control Script block
                            Controls.online.Boolean = true
                        end
                        timerComms:Start(30)
                    end
                elseif string.find(path, "/V1/MEDIA/VIDEO/XP") then -- Video Crosspoint
                    if func == "ConnectedSource" then
                        matrix_feedback(val:sub(-1),path:sub(-1))
                    elseif func == "ConnectedDestinations" then 
                        -- Connected source is catching them all
                    elseif func == "SignalPresent" then 
                        -- Check it's an Input SignalPresent
                        if path:sub(-2,-2) == "I" then
                            Controls["input_signal"][tonumber(path:sub(-1))].Boolean = (val == "true")
                        end
                    elseif func == "Mute" then
                        Controls["video_mute_" .. path:sub(-1)].Boolean = (val == "true")
                    end
                end
            end
            -- Read a new line
            line = conn:ReadLine(TcpSocket.EOL.Any)
        end
    end

    -- Set IP address from Properties if present
    if Properties then
        connMethod = Properties["Connection Type"].Value
        if Properties["IP Address"].Value ~= "" then
            LW3.Host = Properties["IP Address"].Value
            fnConnect()
        else
            print("IP Address Property Not Set")
        end
    end

    for i = 1, output_count do
        Controls["output_" .. i].EventHandler = function()
            tie_command(Controls["output_" .. i].String, i)
        end
        Controls["video_mute_" .. i].EventHandler = function()
            if Controls["video_mute_" .. i].Boolean then
                print("SET", string.format("/V1/MEDIA/VIDEO/XP/O%i.Mute=true", i))
                fnSend("SET", string.format("/V1/MEDIA/VIDEO/XP/O%i.Mute=true", i))
            else
                fnSend("SET", string.format("/V1/MEDIA/VIDEO/XP/O%i.Mute=false", i))
            end
        end
    end
    for i = 1, output_count do
        for p = 1, input_count do
            Controls["input_" .. p .. "-output_" .. i].EventHandler = function()
                Controls["output_" .. i].String = tostring(p)
                tie_command(Controls["output_" .. i].String, i)
            end
        end
    end
end
